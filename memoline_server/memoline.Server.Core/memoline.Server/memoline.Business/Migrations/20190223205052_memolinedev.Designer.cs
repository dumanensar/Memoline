// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using memoline.Business;

namespace memoline.Business.Migrations
{
    [DbContext(typeof(memolineDBContext))]
    [Migration("20190223205052_memolinedev")]
    partial class memolinedev
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.SerialColumn)
                .HasAnnotation("ProductVersion", "2.2.2-servicing-10034")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            modelBuilder.Entity("memoline.Model.ExceptionLog", b =>
                {
                    b.Property<int>("ExceptionLogID")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("CreateDate");

                    b.Property<string>("ExceptionMessage");

                    b.Property<string>("Request");

                    b.Property<int?>("UserId");

                    b.HasKey("ExceptionLogID");

                    b.ToTable("ExceptionLogs");
                });

            modelBuilder.Entity("memoline.Model.Hashtag", b =>
                {
                    b.Property<int>("HashtagID")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("CreateDate");

                    b.Property<string>("HashtagValue");

                    b.Property<bool>("IsDeleted");

                    b.Property<DateTime>("UpdateDate");

                    b.HasKey("HashtagID");

                    b.ToTable("Hashtags");
                });

            modelBuilder.Entity("memoline.Model.Note", b =>
                {
                    b.Property<int>("NoteID")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ContentText");

                    b.Property<string>("ContentURL");

                    b.Property<DateTime>("CreateDate");

                    b.Property<bool>("IsChecked");

                    b.Property<bool>("IsDeleted");

                    b.Property<DateTime>("NoteDate");

                    b.Property<int>("NoteType");

                    b.Property<string>("NoteUniqueID");

                    b.Property<DateTime>("UpdateDate");

                    b.Property<int>("UserID");

                    b.HasKey("NoteID");

                    b.ToTable("Notes");
                });

            modelBuilder.Entity("memoline.Model.NoteHashtag", b =>
                {
                    b.Property<int>("NoteID");

                    b.Property<int>("HashtagID");

                    b.HasKey("NoteID", "HashtagID");

                    b.HasIndex("HashtagID");

                    b.ToTable("NoteHashtags");
                });

            modelBuilder.Entity("memoline.Model.User", b =>
                {
                    b.Property<int>("UserID")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("CreateDate");

                    b.Property<string>("Email");

                    b.Property<bool>("IsDeleted");

                    b.Property<bool>("IsValid");

                    b.Property<DateTime>("LastSyncDate");

                    b.Property<string>("Name");

                    b.Property<string>("Password");

                    b.Property<string>("Surname");

                    b.Property<DateTime>("UpdateDate");

                    b.Property<int>("UserType");

                    b.HasKey("UserID");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("memoline.Model.UserAccessKey", b =>
                {
                    b.Property<int>("UserAccessKeyID")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("AccessKey");

                    b.Property<DateTime>("CreateDate");

                    b.Property<bool>("IsDeleted");

                    b.Property<bool>("IsExpired");

                    b.Property<DateTime>("UpdateDate");

                    b.Property<int>("UserID");

                    b.HasKey("UserAccessKeyID");

                    b.HasIndex("UserID");

                    b.ToTable("UserAccessKeys");
                });

            modelBuilder.Entity("memoline.Model.NoteHashtag", b =>
                {
                    b.HasOne("memoline.Model.Hashtag", "Hashtag")
                        .WithMany("NoteHashtags")
                        .HasForeignKey("HashtagID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("memoline.Model.Note", "Note")
                        .WithMany("NoteHashtags")
                        .HasForeignKey("NoteID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("memoline.Model.UserAccessKey", b =>
                {
                    b.HasOne("memoline.Model.User", "User")
                        .WithMany()
                        .HasForeignKey("UserID")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
